const { SlashCommandBuilder, EmbedBuilder, ApplicationCommandOptionType } = require('discord.js');
const Level = require('../../models/Level'); 
const calculateLevelXp = require('../../utils/calculateLevelXp')

module.exports = {
  name: 'addxp',
  description: 'Add experience points to a user',
  devOnly: true,
  options: [
    {
      name: 'user',
      description: 'The user to whom you want to give XP',
      type: ApplicationCommandOptionType.User,
      required: true, // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    },
    {
      name: 'amount',
      description: 'The amount of XP you want to give',
      type: ApplicationCommandOptionType.Integer,
      required: true, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ XP –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
      minValue: 1, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ XP
    },
  ],
  
  callback: async (client, interaction) => {
    const UserSettings = require('../../models/UserSettings');
    const userSettings = await UserSettings.findOne({ guildId: interaction.guild.id, userId: interaction.user.id });
    const embedColor = userSettings ? userSettings.systemColor : '#303135'; 
    const targetUser = interaction.options.getUser('user'); // –ü–æ–ª—É—á–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const amount = interaction.options.getInteger('amount'); // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ XP
    const guildId = interaction.guild.id;
    const userId = targetUser.id;

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    let userLevelData = await Level.findOne({ guildId, userId });
    if (!userLevelData) {
      userLevelData = await Level.create({ guildId, userId, level: 1, xp: 0 });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º XP –∫ —Ç–µ–∫—É—â–µ–º—É –æ–ø—ã—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userLevelData.xp += amount;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
    const nextLevelXP = calculateLevelXp(userLevelData.level); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
    let leveledUp = false;

    while (userLevelData.xp >= nextLevelXP) {
      userLevelData.xp -= nextLevelXP;
      userLevelData.level += 1;
      leveledUp = true;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await userLevelData.save();

    // –°–æ–∑–¥–∞–µ–º Embed –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    const embed = new EmbedBuilder()
    .setColor(embedColor)
      .setTitle('üéâ XP Added!')
      .setDescription(`${amount} XP has been added to ${targetUser.username}.`)
      .addFields(
        { name: 'Current Level', value: `${userLevelData.level}`, inline: true },
        { name: 'Current XP', value: `${userLevelData.xp}`, inline: true },
        { name: 'XP to Next Level', value: `${calculateLevelXp(userLevelData.level)}`, inline: true }
      )
      .setFooter({ text: `Requested by ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL() })
      .setTimestamp();

    if (leveledUp) {
      embed.addFields({ name: 'Level Up!', value: `${targetUser.username} has reached level ${userLevelData.level}!` });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    interaction.reply({ embeds: [embed] });
  },
};
